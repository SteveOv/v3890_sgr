Written in Python 3.8 for a venv set up with the following libraries;

numpy
pandas
matplotlib
astropy
specutils
scipy
uncertainties


Photometry
----------
Run photometry.py for photometry processing and analysis
    All required data files for photometry are within subdirectories of  the ./data directory


Spectroscopy
------------
Run spectroscopy.py for equivalent spectroscopy analysis
However
    Depends on spectrum fits files in ~/Documents/V3890_Sgr_Data/LT_Spectra/flux_cal_pipeline/dereddened/
    These will need to have been through a sky subtraction, flux calibration and de-reddening pipeline (follows)

Spectroscopy DR pipeline
------------------------
The DR pipeline for spectra given here is a combination of Python modules under ./data/LT/ and IRAF/PyRAF commands.

    1.Sky subtraction:
        * sky_subtraction_pipeline.py/json performs sky subtraction of object and standard observations
          from LT observations and produces mean, sky subtracted spectra for each observation set (3 source fits)
        * 120 fits in -> 40 fits out, 20 each for read and blue arm.
        * source files from
            target: Documents/V3890_Sgr_Data/LT_Spectra/JL19A06private2105703012reduced/
            standard: Documents/V3890_Sgr_Data/LT_Spectra/standard-observations/Hilt102/
        * outputs files to
            target: Documents/V3890_Sgr_Data/LT_Spectra/flux_cal_pipeline/object/
            standard: Documents/V3890_Sgr_Data/LT_Spectra/flux_cal_pipeline/standard/
        * also outputs diagnostics plots (to output directory)
            * <input filename>.png
            * fibre flux ratios in histogram & heatmap + spectra from std pipeline and this, custom pipeline

    2. Flux calibration:
        * IRAF / PyRAF (in my case on a MacOS Mojave VM) - PyRaf installed & config'd under Anaconda
        * Start the IRAF command line and initiate IRAF onedspec environment/library
            * Start terminal
                * "conda activate iraf27" (or equivalent conda environment which includes PyRaf)
                * "xgterm &"
            * Move over the xgterm terminal window
                * cd to the iraf directory (in my case under the user's Home directory), then...
                * "cl"
                * "noao"
                * "onedspec"
                * "observatory set lapalma"
        * Once each for the blue arm and red arm separately...
            * config: "epar standard" and set; input files, output file, star_name (hiltner_102), Answer (NO) & Caldir
            * Run: "standard" against the standard fits file from photometric ni:ghts; output standard file

            * config: "epar sens" and set standard file (from previous step), sensitivity file & Answer (Yes)
            * Run: "sens standard" to produce a master sensitivity file (for red or blue arm)

            * config: "epar calibrate" input SS target fits files, output cal target fits files,
                      extinct (no), observa (lapalma), sensiti (sens file from previous step)
            * Run: "calibrate" to produce calibrated copies of the input target, sky subtracted spectra
                output to host directory: Documents/V3890_Sgr_Data/LT_Spectra/flux_cal_pipeline/calibrated/

    3. Absolute flux calibration, scaling and de-reddening.
        * Create a bandpass.txt file (note the R filter would normally be 1066 A wide, but have to restrict to 890
            otherwise sbands produces nothing for the red arm)
            		U 3656 340 none
                    B 4353 781 none
                    V 5477 991 none
                    R 6349 890 none
                    I 8797 2892 none
        * IRAF / PyRAF - follow instructions under 2. for initiating IRAF and onedspec environment/library
            * config: "epar sbands" and set input file list (output list from calibrate), output file, bands file (above)
            * Run: "sbands" to produce the sbands_fluxes.txt output file
        * Python to Create scaling factors
            * Copy sbands_fluxes.txt into the ./data/LT/ directory of the Python project
            * Run calculate_spectra_flux_scale_factors.py
                * Calculates the ratio (at spectral epoch) of flux values photometry (from PL fits) : spectral flux
                * Writes a list of imarith calls to console: these will apply the scaling factor derived from ratio
        * IRAF / PyRAF - under the existing onedspec environment
            * copy / paste and run the imarith calls generated by the Python step above
                * Writes new copy of fits files to local (to VM's iraf dir) ./scaled/scaled_<target_filename>.fits
        * IRAF / PyRAF - under the existing onedspec environment
            * config: "epar deredden" and set input to list "scaled" files, output to file list, value = 0.231,
                      R = 3.1, type = E(B-V), overrid = no, oncorre = yes, mode = ql
            * run: "deredden" to produce new copies of the target fits files in a local (to VM iraf) subdirectory
            * copy these final, de-reddened files to the host machine's
                ~/Documents/V3890_Sgr_Data/LT_Spectra/flux_cal_pipeline/dereddened/

        * These are the input files used by the spectroscopy.py module.


SteveO...